package jiraApi;

import static io.restassured.RestAssured.*;
import static org.hamcrest.Matchers.lessThan;

import java.io.File;

import org.testng.Assert;

import io.restassured.RestAssured;
import io.restassured.filter.session.SessionFilter;
import io.restassured.path.json.JsonPath;
import payloadData.JiraPayload;
import payloadData.reusableMethods;

public class JiraTest {

	public static void main(String[] args) {
		
		RestAssured.baseURI = "http://localhost:8080";
		
		//Login Scenario to generate sessionId(key)
		SessionFilter session = new SessionFilter();
		 String response = given().log().all().header("Content-Type","application/json").body(JiraPayload.createSession())
		.filter(session).when().post("/rest/auth/1/session")
		.then().log().all().extract().asString();
		 
		 
		 // Add comment to the existing issue
		 String expMessage = "This is autogenerated comment";
		 String commentResponse = given().log().all().pathParam("key", "10000").header("Content-Type","application/json").body(JiraPayload.addComment(expMessage))
		 .filter(session).when().post("/rest/api/2/issue/{key}/comment")
		 .then().log().all().assertThat().statusCode(201).extract().response().asString();
		 
		 JsonPath jp = reusableMethods.rawToJson(commentResponse);
		 String commentId =  jp.getString("id");
		 
		 // Adding attachment to an issue
		 given().pathParam("key", "10000").header("X-Atlassian-Token","no-check").filter(session)
		 //.multipart is used to attach any files to the request with the header type as mentioned below 
		 .header("Content-Type","multipart/form-data").multiPart("file", new File("testfile.txt"))
		 .multiPart("file",new File("C:\\Users\\Lenovo\\eclipse-workspace\\ApiAutomation\\src\\main\\java\\resources\\testfile.jpg"))
		 .when().post("/rest/api/2/issue/{key}/attachments")
		 .then().log().all().assertThat().statusCode(200);
	
		 // Getting the details of the issue
		 // relaxedHTTPsValidation method means that you'll trust all hosts regardless if the SSL certificate is invalid
		 String getResp = given().relaxedHTTPSValidation().log().all().pathParam("key", "10000").filter(session).queryParam("fields", "comment")
		 .when().get("/rest/api/2/issue/{key}")
		 .then().assertThat().statusCode(200).time(lessThan(2000L)).extract().response().asString();
		 
		 JsonPath js = reusableMethods.rawToJson(getResp);
		 int commentSize = js.getInt("fields.comment.comments.size()");
		 for(int i = 0 ; i < commentSize;) {
			 String commentIds = js.get("fields.comment.comments["+i+"].id").toString();
			 if(commentIds.equalsIgnoreCase(commentId)) {
				 String actMessage = js.get("fields.comment.comments["+i+"].body").toString();
				 Assert.assertEquals(actMessage, expMessage);
			 }
			 break;
		 }
	}
}
